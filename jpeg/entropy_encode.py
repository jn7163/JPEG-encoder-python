#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Time-stamp: < entropy_encode.py 2016-05-09 22:44:43 >
"""
熵编码
""" 

# 色度交流系数，从itu-t81.pdf中复制过来的。
huffman_AC_luminance_table=(
	"1010",
	"00",
	"01",
	"100",
	"1011",
	"11010",
	"1111000",
	"11111000",
	"1111110110",
	"1111111110000010",
	"1111111110000011",
	"1100",
	"11011",
	"1111001",
	"111110110",
	"11111110110",
	"1111111110000100",
	"1111111110000101",
	"1111111110000110",
	"1111111110000111",
	"1111111110001000",
	"11100",
	"11111001",
	"1111110111",
	"111111110100",
	"1111111110001001",
	"1111111110001010",
	"1111111110001011",
	"1111111110001100",
	"1111111110001101",
	"1111111110001110",
	"111010",
	"111110111",
	"111111110101",
	"1111111110001111",
	"1111111110010000",
	"1111111110010001",
	"1111111110010010",
	"1111111110010011",
	"1111111110010100",
	"1111111110010101",
	"111011",
	"1111111000",
	"1111111110010110",
	"1111111110010111",
	"1111111110011000",
	"1111111110011001",
	"1111111110011010",
	"1111111110011011",
	"1111111110011100",
	"1111111110011101",
	"1111010",
	"11111110111",
	"1111111110011110",
	"1111111110011111",
	"1111111110100000",
	"1111111110100001",
	"1111111110100010",
	"1111111110100011",
	"1111111110100100",
	"1111111110100101",
	"1111011",
	"111111110110",
	"1111111110100110",
	"1111111110100111",
	"1111111110101000",
	"1111111110101001",
	"1111111110101010",
	"1111111110101011",
	"1111111110101100",
	"1111111110101101",
	"11111010",
	"111111110111",
	"1111111110101110",
	"1111111110101111",
	"1111111110110000",
	"1111111110110001",
	"1111111110110010",
	"1111111110110011",
	"1111111110110100",
	"1111111110110101",
	"111111000",
	"111111111000000",
	"1111111110110110",
	"1111111110110111",
	"1111111110111000",
	"1111111110111001",
	"1111111110111010",
	"1111111110111011",
	"1111111110111100",
	"1111111110111101",
	"111111001",
	"1111111110111110",
	"1111111110111111",
	"1111111111000000",
	"1111111111000001",
	"1111111111000010",
	"1111111111000011",
	"1111111111000100",
	"1111111111000101",
	"1111111111000110",
	"111111010",
	"1111111111000111",
	"1111111111001000",
	"1111111111001001",
	"1111111111001010",
	"1111111111001011",
	"1111111111001100",
	"1111111111001101",
	"1111111111001110",
	"1111111111001111",
	"1111111001",
	"1111111111010000",
	"1111111111010001",
	"1111111111010010",
	"1111111111010011",
	"1111111111010100",
	"1111111111010101",
	"1111111111010110",
	"1111111111010111",
	"1111111111011000",
	"1111111010",
	"1111111111011001",
	"1111111111011010",
	"1111111111011011",
	"1111111111011100",
	"1111111111011101",
	"1111111111011110",
	"1111111111011111",
	"1111111111100000",
	"1111111111100001",
	"11111111000",
	"1111111111100010",
	"1111111111100011",
	"1111111111100100",
	"1111111111100101",
	"1111111111100110",
	"1111111111100111",
	"1111111111101000",
	"1111111111101001",
	"1111111111101010",
	"1111111111101011",
	"1111111111101100",
	"1111111111101101",
	"1111111111101110",
	"1111111111101111",
	"1111111111110000",
	"1111111111110001",
	"1111111111110010",
	"1111111111110011",
	"1111111111110100",
	"11111111001",
	"1111111111110101",
	"1111111111110110",
	"1111111111110111",
	"1111111111111000",
	"1111111111111001",
	"1111111111111010",
	"1111111111111011",
	"1111111111111100",
	"1111111111111101",
	"1111111111111110"
)

huffman_DC_luminance_table =(
	"00",
	"010",
	"011",
	"100",
	"101",
	"110",
	"1100",
	"11110",
	"111110",
	"1111110",
	"11111110",
	"111111110"
)


# 计算幅值，课本P133
def calc_amplitude(input_num, need_bit, mode="AC"):
	num = abs(input_num) & 0xffff
	if mode == 'DC' and input_num == 0:
		return "0"
	index = 0
	output_string = ""
	# 正数
	if  input_num >= 0:
		while index < need_bit:
			this_bit = "1" if ((num >> index) & 0x1) else "0"
			output_string = this_bit + output_string
			index += 1
	# 负数
	else:
		while index < need_bit:
			this_bit = "0" if ((num >> index) & 0x1) else "1"
			output_string = this_bit + output_string
			index += 1

	return output_string

# 哈夫曼变长编码，JPEG标准
def get_entropy_encode(input_list):
	output_list = []
	# DC 编码
	dc_bit = input_list[0][0]
	dc_amp = input_list[0][1]
	# 查表
	(dc_bit, dc_amp) = (huffman_DC_luminance_table[dc_bit], calc_amplitude(dc_amp, dc_bit, "DC"))
	insert_item = (dc_bit, dc_amp)
	output_list.append(insert_item)

	# AC 编码
	for ac_item in input_list[1:-1]:
		ac_zero_counter = ac_item[0]
		ac_bit = ac_item[1]
		# 由(跨越/位长)得出查表位置=跨越*10+位长
		position_in_huffman_table = ac_zero_counter * 10 + ac_bit
		ac_amp = ac_item[2]
		ac_amp = calc_amplitude(ac_amp, ac_bit)
		# 通过(跨越/位长)来查表
		coefficient = huffman_AC_luminance_table[position_in_huffman_table]
		insert_item = (coefficient, ac_amp)
		output_list.append(insert_item)
		
	# EOB编码
	EOB = ("1010", )
	output_list.append(EOB)
	
	return output_list

def test():
	# 测试数据，来自P130上方
	test_list = [(2, 3), (1, 2, -2), (0, 1, -1), (0, 1, -1), (0, 1, -1), (2, 1, -1), (0, 0)]
	ll = get_entropy_encode(test_list)
	for i in ll:print i

if __name__ == '__main__':
	test()


# 色度交流系数，从itu-t81.pdf中复制过来的。
# huffman_AC_chrominance_table={
# 	# ignore EOB
# 	"0/1":"01",
# 	"0/2":"100",
# 	"0/3":"1010",
# 	"0/4":"11000",
# 	"0/5":"11001",
# 	"0/6":"111000",
# 	"0/7":"1111000",
# 	"0/8":"111110100",
# 	"0/9":"1111110110",
# 	"0/A":"111111110100",
# 	"1/1":"1011",
# 	"1/2":"111001",
# 	"1/3":"11110110",
# 	"1/4":"111110101",
# 	"1/5":"11111110110",
# 	"1/6":"111111110101",
# 	"1/7":"1111111110001000",
# 	"1/8":"1111111110001001",
# 	"1/9":"1111111110001010",
# 	"1/A":"1111111110001011",
# 	"2/1":"11010",
# 	"2/2":"11110111",
# 	"2/3":"1111110111",
# 	"2/4":"111111110110",
# 	"2/5":"111111111000010",
# 	"2/6":"1111111110001100",
# 	"2/7":"1111111110001101",
# 	"2/8":"1111111110001110",
# 	"2/9":"1111111110001111",
# 	"2/A":"1111111110010000",
# 	"3/1":"11011",
# 	"3/2":"11111000",
# 	"3/3":"1111111000",
# 	"3/4":"111111110111",
# 	"3/5":"1111111110010001",
# 	"3/6":"1111111110010010",
# 	"3/7":"1111111110010011",
# 	"3/8":"1111111110010100",
# 	"3/9":"1111111110010101",
# 	"3/A":"1111111110010110",
# 	"4/1":"111010",
# 	"4/2":"111110110",
# 	"4/3":"1111111110010111",
# 	"4/4":"1111111110011000",
# 	"4/5":"1111111110011001",
# 	"4/6":"1111111110011010",
# 	"4/7":"1111111110011011",
# 	"4/8":"1111111110011100",
# 	"4/9":"1111111110011101",
# 	"4/A":"1111111110011110",
# 	"5/1":"111011",
# 	"5/2":"1111111001",
# 	"5/3":"1111111110011111",
# 	"5/4":"1111111110100000",
# 	"5/5":"1111111110100001",
# 	"5/6":"1111111110100010",
# 	"5/7":"1111111110100011",
# 	"5/8":"1111111110100100",
# 	"5/9":"1111111110100101",
# 	"5/A":"1111111110100110",
# 	"6/1":"1111001",
# 	"6/2":"11111110111",
# 	"6/3":"1111111110100111",
# 	"6/4":"1111111110101000",
# 	"6/5":"1111111110101001",
# 	"6/6":"1111111110101010",
# 	"6/7":"1111111110101011",
# 	"6/8":"1111111110101100",
# 	"6/9":"1111111110101101",
# 	"6/A":"1111111110101110",
# 	"7/1":"1111010",
# 	"7/2":"11111111000",
# 	"7/3":"1111111110101111",
# 	"7/4":"1111111110110000",
# 	"7/5":"1111111110110001",
# 	"7/6":"1111111110110010",
# 	"7/7":"1111111110110011",
# 	"7/8":"1111111110110100",
# 	"7/9":"1111111110110101",
# 	"7/A":"1111111110110110",
# 	"8/1":"11111001",
# 	"8/2":"1111111110110111",
# 	"8/3":"1111111110111000",
# 	"8/4":"1111111110111001",
# 	"8/5":"1111111110111010",
# 	"8/6":"1111111110111011",
# 	"8/7":"1111111110111100",
# 	"8/8":"1111111110111101",
# 	"8/9":"1111111110111110",
# 	"8/A":"1111111110111111",
# 	"9/1":"111110111",
# 	"9/2":"1111111111000000",
# 	"9/3":"1111111111000001",
# 	"9/4":"1111111111000010",
# 	"9/5":"1111111111000011",
# 	"9/6":"1111111111000100",
# 	"9/7":"1111111111000101",
# 	"9/8":"1111111111000110",
# 	"9/9":"1111111111000111",
# 	"9/A":"1111111111001000",
# 	"A/1":"111111000",
# 	"A/2":"1111111111001001",
# 	"A/3":"1111111111001010",
# 	"A/4":"1111111111001011",
# 	"A/5":"1111111111001100",
# 	"A/6":"1111111111001101",
# 	"A/7":"1111111111001110",
# 	"A/8":"1111111111001111",
# 	"A/9":"1111111111010000",
# 	"A/A":"1111111111010001",
# 	"B/1":"111111001",
# 	"B/2":"1111111111010010",
# 	"B/3":"1111111111010011",
# 	"B/4":"1111111111010100",
# 	"B/5":"1111111111010101",
# 	"B/6":"1111111111010110",
# 	"B/7":"1111111111010111",
# 	"B/8":"1111111111011000",
# 	"B/9":"1111111111011001",
# 	"B/A":"1111111111011010",
# 	"C/1":"111111010",
# 	"C/2":"1111111111011011",
# 	"C/3":"1111111111011100",
# 	"C/4":"1111111111011101",
# 	"C/5":"1111111111011110",
# 	"C/6":"1111111111011111",
# 	"C/7":"1111111111100000",
# 	"C/8":"1111111111100001",
# 	"C/9":"1111111111100010",
# 	"C/A":"1111111111100011",
# 	"D/1":"11111111001",
# 	"D/2":"1111111111100100",
# 	"D/3":"1111111111100101",
# 	"D/4":"1111111111100110",
# 	"D/5":"1111111111100111",
# 	"D/6":"1111111111101000",
# 	"D/7":"1111111111101001",
# 	"D/8":"1111111111101010",
# 	"D/9":"1111111111101011",
# 	"D/A":"1111111111101100",
# 	"E/1":"11111111100000",
# 	"E/2":"1111111111101101",
# 	"E/3":"1111111111101110",
# 	"E/4":"1111111111101111",
# 	"E/5":"1111111111110000",
# 	"E/6":"1111111111110001",
# 	"E/7":"1111111111110010",
# 	"E/8":"1111111111110011",
# 	"E/9":"1111111111110100",
# 	"E/A":"1111111111110101",
# 	"F/0":"1111111010",
# 	"F/1":"111111111000011",
# 	"F/2":"1111111111110110",
# 	"F/3":"1111111111110111",
# 	"F/4":"1111111111111000",
# 	"F/5":"1111111111111001",
# 	"F/6":"1111111111111010",
# 	"F/7":"1111111111111011",
# 	"F/8":"1111111111111100",
# 	"F/9":"1111111111111101",
# 	"F/A":"1111111111111110"
# }
